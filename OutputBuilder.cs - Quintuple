using Microsoft.AspNetCore.Components.Forms;
using System;
using System.Text;
using static chatdotindex.Pages.Index;

namespace chatdotindex
{
    public class OutputBuilder
    {
        public static int Attempts { get; set; } = 0;
        public static string? Output { get; set; }
        public static string? ChtApproach { get; set; }
        public static string? ChtSubject { get; set; }
        public static string? ChtModus { get; set; }
        public static string? ChtX { get; set; }
        public static string? ChtY { get; set; }
        public static string? ChtZ { get; set; }
        public static string? ToConfirm { get; set; }
        public static string? ChtVisitor { get; set; }
        public static StringBuilder? SB { get; set; }

        public class OutputStreamLine
        {
            public OutputStreamLine(string lineOut)
            {
                StreamLine = lineOut;
            }
            public string? StreamLine { get; set; }
        }

        private static readonly List<OutputStreamLine> AgrOutput = new();

        static public void NewOutputBuilder()
        {
            Chat.MsgCount = 0;
            Session.IsSessionActive = true;
            Session.SessionMessages.Add(new Message(Session.NowTxtTime, "The Administrator", "Welcome to Regentesse.info.", "end", "right"));
            Interpreter.MessagesReceived = +1;
            Session.Alerts = "A new session has been initiated.";
            Attempts = 0;
        }
       static public void CreateOutput()
       {
            if (Interpreter.Scenario == "A")
            {
                switch (Reading.ReadIndex)
                {
                    case 3:
                        Interpreter.UseIncentives = false;
                        Interpreter.UseContext = true;
                        Interpreter.Module = 1;
                        EndIntroductory();
                        break;
                    default:
                        Session.SessionMessages.Add(new Message(Session.NowTxtTime, "The Administrator", "Something is not going right.", "end", "right"));
                        Reading.ReadIndex = 2;
                        break;
                }
            }
            if (Interpreter.Scenario == "B")
            {
                switch (Reading.ReadIndex)
                {
                    case 1:
                        Interpreter.UseIncentives = true;
                        Interpreter.UseContext = false;
                        AgrOutput.Add(new OutputStreamLine("[New Modus.]"));
                        break;
                    case 2:
                        Interpreter.UseIncentives = false;
                        Interpreter.UseContext = true;
                        AgrOutput.Add(new OutputStreamLine("[Type 'Affirmative' to Confirm.]"));
                        break;
                    case 3:
                        Interpreter.UseIncentives = true;
                        Interpreter.UseContext = false;
                        AgrOutput.Add(new OutputStreamLine("[End of Modus.]"));
                        break;
                    default:
                        Session.SessionMessages.Add(new Message(Session.NowTxtTime, "The Administrator", "Something is not going right.", "end", "right"));
                        Reading.ReadIndex = 2;
                        break;
                }
            }
            if (Interpreter.Scenario == "C")
            {
                switch (Reading.ReadIndex)
                {
                    case 1:
                        Interpreter.UseIncentives = true;
                        Interpreter.UseContext = false;
                        AgrOutput.Add(new OutputStreamLine("[New Modus.]"));
                        break;
                    case 2:
                        Interpreter.UseIncentives = false;
                        Interpreter.UseContext = true;
                        AgrOutput.Add(new OutputStreamLine("[Type 'Affirmative' to Confirm.]"));
                        break;
                    case 3:
                        Interpreter.UseIncentives = true;
                        Interpreter.UseContext = false;
                        AgrOutput.Add(new OutputStreamLine("[End of Modus.]"));
                        break;
                    default:
                        Session.SessionMessages.Add(new Message(Session.NowTxtTime, "The Administrator", "Something is not going right.", "end", "right"));
                        Reading.ReadIndex = 2;
                        break;
                }
            }
            if (Interpreter.Scenario == "D")
            {
                switch (Reading.ReadIndex)
                {
                    case 1:
                        Interpreter.UseIncentives = true;
                        Interpreter.UseContext = false;
                        AgrOutput.Add(new OutputStreamLine("[New Modus.]"));
                        StartCustom();
                        break;
                    case 2:
                        Interpreter.UseIncentives = false;
                        Interpreter.UseContext = true;
                        AgrOutput.Add(new OutputStreamLine("[Type 'Affirmative' to Confirm.]"));
                        break;
                    case 3:
                        Interpreter.UseIncentives = true;
                        Interpreter.UseContext = false;
                        AgrOutput.Add(new OutputStreamLine("[End of Modus.]"));
                        break;
                    default:
                        Session.SessionMessages.Add(new Message(Session.NowTxtTime, "The Administrator", "Something is not going right.", "end", "right"));
                        Reading.ReadIndex = 2;
                        break;
                }
            }
        }
        static public void EndIntroductory()
        {
        //    SB!.AppendLine(Interpreter.Sub1!.ToString()).AppendLine(Interpreter.Sub2!.ToString());
            AgrOutput.Add(new OutputStreamLine("New session, new statements."));
            AgrOutput.Add(new OutputStreamLine("Simple, advanced or custom?"));
            //    AgrOutput.Add(new OutputStreamLine(SB!.ToString()));
            Interpreter.MessagesReceived = +2;
            Attempts++;
            SubmitOutput();
        }

        static public void StartCustom()
        {
            AgrOutput.Add(new OutputStreamLine("I see, we're going custom."));
            Interpreter.MessagesReceived = +1;
            Attempts++;
            SubmitOutput();
        }
        static public void SubmitOutput()
        {
            foreach (var LineOut in AgrOutput!)
            {
                Output = LineOut.StreamLine!;
                Chat.MsgIncomingTxt = Output;
                Chat.NewMessage();
            }
            ForTheRecord();
        }

        static public void ForTheRecord()
        {
            AgrOutput.Clear();
            Interpreter.LinesToRead.Clear();
            Chat.Processing = false;
            Chat.InProgress();
        }
    }
}
