using Microsoft.AspNetCore.Components.Forms;
using System;
using System.Text;
using static chatdotindex.Pages.Index;

namespace chatdotindex
{
    public class OutputBuilder
    {
        public static int Attempts { get; set; } = 0;
        public static string? Output { get; set; }
        public static string? ChtApproach { get; set; }
        public static string? ChtSubject { get; set; }
        public static string? ChtModus { get; set; }
        public static string? ChtX { get; set; }
        public static string? ChtY { get; set; }
        public static string? ChtZ { get; set; }
        public static string? ToConfirm { get; set; }
        public static string? ChtVisitor { get; set; }
        public static StringBuilder? SB { get; set; }

        public class OutputStreamLine
        {
            public OutputStreamLine(string lineOut)
            {
                StreamLine = lineOut;
            }
            public string? StreamLine { get; set; }
        }

        private static readonly List<OutputStreamLine> AgrOutput = new();

        static public void NewOutputBuilder()
        {
            Session.Chat.MsgCount = 0;
            Session.IsSessionActive = true;
            Session.SessionMessages.Add(new Message(Session.NowTxtTime, "The Administrator", "Welcome to Regentesse.info.", "end", "right"));
            Session.Alerts = "A new session has been initiated.";
            Attempts = 0;
        }

       static public void CreateOutput()
       {
             //new line in StreamLine w/ChtX. -> SubmitOutput();
            if (Interpreter.Scenario == "A")
            {
                SB!.AppendLine(Interpreter.Sub1!.ToString()).AppendLine(Interpreter.Sub2!.ToString());
                AgrOutput.Add(new OutputStreamLine("Use this tool to state an answer to any question."));
                AgrOutput.Add(new OutputStreamLine("Would you like the simple, advanced or custom approach?"));
                AgrOutput.Add(new OutputStreamLine(SB!.ToString()));
                ConfirmationalOutput();
            }
            if (Interpreter.Scenario == "B")
            {
                if (Interpreter.Lines!.Contains("Affirmative"))
                {
                    Reading.ReadIndex = 3;
                }
            }
            if (Interpreter.Scenario == "C")
            {

            }
            if (Interpreter.Scenario == "D")
            {

            }
        }

        static private void IntrodctoryOutput()
        {
            Attempts++;
            if (Reading.ReadIndex == 1)
            {
                AgrOutput.Add(new OutputStreamLine("[New Modus.]"));
            }
            if (Reading.ReadIndex == 2)
            {
                AgrOutput.Add(new OutputStreamLine("[Type 'Affirmative' to Proceed.]"));
            }
            if (Reading.ReadIndex == 3)
            {

            }
        }

        static private void DefinitiveOutput()
        {
            Attempts++;
            if (Reading.ReadIndex == 1)
            {

            }
            if (Reading.ReadIndex == 2)
            {

            }
            if (Reading.ReadIndex == 3)
            {
                AgrOutput.Add(new OutputStreamLine("[End of Modus.]"));
            }
        }

        static private void ConfirmationalOutput()
        {
            Attempts++;
            if (Reading.ReadIndex == 1)
            {

            }
            if (Reading.ReadIndex == 2)
            {

            }
            if (Reading.ReadIndex == 3)
            {

            }
        }

        static public void SubmitOutput()
        {
            foreach (var LineOut in AgrOutput!)
            {
                Output = LineOut.StreamLine!;
                Session.Chat.MsgIncomingTxt = Output;
                Session.Chat.NewMessage();
            }
            
        }

        static public void ForTheRecord()
        {
            Interpreter.LinesToRead.Clear();
            Session.Chat.IsProcessing = false;
            Session.Chat.InProgress();
        }
    }
}
