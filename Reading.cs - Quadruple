using static chatdotindex.Pages.Index;
using System.Diagnostics;
using static chatdotindex.Interpreter;
using chatdotindex;

namespace chatdotindex
{
    public class Reading
    {
        public static int Bookmark { get; set; } = 0;
        public static int BookmarkIndex { get; set; } = 1;
        private static Stopwatch MsgTimer { get; set; } = Stopwatch.StartNew();
        public static List<Message>? IsReading { get; set; } = new List<Message>() { };
        public static int? ReadIndex { get; set; }
        public static string? ChtSubject { get; set; }
        public static string? ChtModus { get; set; }
        public static string? ChtX { get; set; }
        public static string? ChtY { get; set; }
        public static string? ChtZ { get; set; }
        public static string? ToConfirm { get; set; }
        public static string? ChtVisitor { get; set; }
        public static string? ChtQuestion { get; set; }
        public static int CountMessagesToRead { get; set; } = 0;

        static public void StartReading()
        {
            MsgTimer.Start();
            Session.Chat.Processing = true;
            Session.Pending = "The Administrator awaits your response.";
                if (MsgTimer.ElapsedMilliseconds > 3000)
                {
                    Session.Chat.InProgress();
                    NewReading();
                    MsgTimer.Stop();
                }
                else if (CountMessagesToRead == 5)
                {
                    Session.Chat.InProgress();
                    NewReading();
                    MsgTimer.Stop();
                }
        }

        static public void NewReading()
        {
            MsgTimer.Reset();
            BookmarkIndex = Session.SessionMessages.Count();
            CountMessagesToRead = BookmarkIndex - Bookmark;
            IsReading = Session.SessionMessages.GetRange(Bookmark, CountMessagesToRead);
            Session.Pending = "The Administrator has" + CountMessagesToRead + " messages to read.";
            Session.Chat.InProgress();
            Interpreter.NewInterpretation();
        }

        static public void StopReading()
        {
                switch (OutputBuilder.ChtApproach)
                {
                    case "Introductory":
                        Interpreter.Scenario = "A";
                        ChtSubject = "introductory";
                        ChtModus = "initiate";
                        ChtZ = "to" + ChtY;
                        break;
                    case "Simple":
                        ChtSubject = "simple approach to finding an answer";
                        ChtModus = "as simple as possible";
                        ChtZ = "to find";
                        Interpreter.Scenario = "B";
                        break;
                    case "Advanced":
                        ChtSubject = "advanced approach to finding an answer";
                        ChtModus = "in detail";
                        ChtZ = "to define";
                        ChtQuestion = "If";
                        Interpreter.Scenario = "C";
                        break;
                    case "Custom":
                        ChtSubject = "custom approach to this chat";
                        ChtModus = "custom";
                        ChtZ = "to" + ChtY;
                        ChtQuestion = "If";
                        Interpreter.Scenario = "D";
                        break;
                }
         }

    }
}
